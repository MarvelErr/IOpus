<!--<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/html">
<head lang="en">
    <meta charset="UTF-8">
    <title>对象的创建与属性访问</title>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="/bower_components/bootstrap/dist/css/bootstrap.min.css"/>
    <link rel="stylesheet" href="/bower_components/font-awesome-4.3.0/css/font-awesome.css"/>
    <link rel="stylesheet/less" href="/stylesheets/blogList/default.less"/>
    <script src="/bower_components/jquery/dist/jquery.min.js"></script>
    <script src="/bower_components/bootstrap/dist/js/bootstrap.min.js"></script>
    <script src="/bower_components/less/dist/less.min.js"></script>
</head>
<body>-->
<article>
    <div class="row">
        <div class="col-xs-12">
            <header class="text-center">
                <h3>对象的创建与属性访问</h3>
            </header>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-12">
            <section>
                <h4><span class="fa fa-bookmark"></span>创建对象</h4>
                <h5>对象直接量</h5>
<pre>
var obj={
    key:value
}
</pre>
                <h5><em>new</em> 操作符</h5>
<pre>
var obj=new constructor();
</pre>
                <h5>原型<em>（prototype）</em></h5>

                <p>每一个JavaScript对象(null除外)都与另一个对象相关联，这个对象就是原型。</p>

                <p>所有通过直接量创建的对象都有同一个原型，通过<em>Object.prototype</em>可以获得对该原型对象的访问。</p>

                <p>通过<em>new</em>操作符创建的对象的原型是构造函数的<em>prototype</em>属性的值</p>
                <h5><em>Object.create()</em></h5>
<pre>
Object.create(prototype,[config]){
    //prototype原型对象
    //可选config，对对象的属性进一步描述
}
</pre>
                <p>该方法可以实现任意原型对象的继承，通过传入<em>null</em>可以创建一个不继承任何属性或方法的对象</p>
                <h5>原型继承的兼容实现</h5>
<pre>
function inherit(){
    if(prototype==null) throw TypeError;
    if(Object.create) return Object.create(prototype);
    var type=typeof prototype;
    if(type!='object'&&type!='function') throw TypeError;
    function f(){}
    f.prototype=prototype;
    return new f();
}
</pre>
            </section>
            <section>
                <h4><span class="fa fa-bookmark"></span>属性的访问和修改</h4>

                <p>点<em>(.)</em>和方括号<em>([])</em>都可以用来访问对象属性。方括号<em>([])</em>接受一个代表属性名的字符串。</p>
                <h5>原型中的属性</h5>

                <p>在给对象的属性赋值的时候，如果原型中存在这个属性，那么对象中的属性将会被重写，原型中的属性不会改变。
                    如果原型中不存在这个属性，那么会在这个对象上新建一个属性。</p>
                <h5>属性的删除</h5>

                <p><em>delete</em>可以删除对象的属性，他操作一个属性访问表达式。</p>

                <p class="warning"><span class="fa fa-tag"></span><em>delete</em>运算符只能删除删除自有属性，不能删除继承属性。</p>
<pre>
var proto={
    name:'foo'
};
var obj=inherit(proto);
obj.name='bar';
delete obj.name;
console.log(obj.name);//foo
</pre>
                <p>调用<em>delete</em>之后相当于恢复了对原型对象属性的访问。</p>

                <p><em>delete</em>成功删除一个属性后或删除一个不存在的属性后都会返回<em>true</em></p>

                <p class="warning"><span class="fa fa-tag"></span><em>delete</em>不能删除可配置性为<em>false</em>的属性，比如通过变量声明或函数声明创建的全局对象的属性。
                    在这些情况下，会返回<em>false</em></p>
<pre>
var x=1;
y=2;//作为全局对象的一个属性，而不是一个变量
//严格模式下需写成this.x
console.log(delete x);//false
console.log(delete y);//true
</pre>

            </section>
            <section>
                <h4><span class="fa fa-bookmark"></span>属性检测</h4>
                <h5><em>in</em>运算符</h5>

                <p>自有属性或继承属性都会返回true</p>
                <h5><em>hasOwnProperty()</em></h5>

                <p>只对自有属性返回<em>true</em></p>
                <h5><em>propertyIsEnumerable()</em></h5>

                <p>只有是可枚举的自有属性时才返回<em>true</em></p>
<pre>
var proto={
    age:25
};
var obj=inherit(proto);
obj.name='bar';
console.log('age' in obj);//true
console.log('name' in obj)//true
console.log(obj.hasOwnProperty('age'))//false
</pre>
            </section>
            <section>
                <h4><span class="fa fa-bookmark"></span>属性枚举</h4>
                <h5><em>for in</em>循环</h5>

                <p>可枚举的自有属性和继承属性</p>
                <h5><em>Object.keys()</em></h5>

                <p>可枚举的自有属性</p>
                <h5><em>Object.getOwnPropertyNames()</em></h5>

                <p>所有的自有属性，包括不可枚举的！</p>
            </section>
            <section>
                <h4><span class="fa fa-bookmark"></span><em>getter</em>和<em>setter</em></h4>

                <p>在ECMAScript5中，属性值用一个或两个方法代替，这两个方法就是<em>getter</em>和<em>setter</em>。
                    由此定义的属性称作“存取器属性”<em>(accessor property)</em>。
                    他不同于数据属性，数据属性只是一个简单的值。</p>

                <p>同时拥有<em>getter</em>和<em>setter</em>，这个属性是一个读/写属性，只有<em>getter</em>时只可读，
                    只有<em>setter</em>时只可写，读取该属性时会得到一个<em>undefined</em></p>

                <p>示例如下</p>
<pre>
var obj={
    _name:'foo',
    get name(){
        return this._name
    },
    set name(value){
        this._name='another'
    }
}
</pre>
                <p class="warning"><span class="fa fa-tag"></span>注意定义的方式与数据属性的不同。同时避免出现在<em>setter</em>中递归调用的情况</p>
            </section>
            <section>
                <h4><span class="fa fa-bookmark"></span>属性的特性</h4>
                <h5>数据属性</h5>

                <p>数据属性的四个特性分别是<em>configurable</em>，<em>enumerable</em>，<em>writable</em>，<em>value</em>。</p>

                <p><em>configurable</em>表示能否通过<em>delete</em>删除属性，能否修改属性的特性，能否把属性修改为访问器属性</p>

                <p><em>enumerable</em>表示能否枚举</p>

                <p><em>writable</em>表示能否修改属性值</p>

                <p><em>value</em>表示属性值</p>

                <p class="warning"><span class="fa fa-tag"></span>一旦将configurable修改为false之后，就只能再修改writable特性，修改别的特性时会导致错误。
                </p>

                <p>要修改一个属性默认的特性，必须调用<em>Object.defineProperty()</em>方法或者<em>Object.defineProperties()</em>方法</p>
<pre>
Object.defineProperty(obj,property,descriptor){
    //descriptor是一个对象，属性必须是上述四个特性中的一个或多个。
}
Object.defineProperties(obj,
    {name:{value:'l'},age:{value:1}}
);
</pre>
                <p class="warning"><span class="fa fa-tag"></span>通过这两个方法定义时，属性的特性默认为<em>false</em></p>
                <h5>访问器属性</h5>

                <p>数据属性的四个特性分别是<em>configurable</em>，<em>enumerable</em>，<em>get</em>，<em>set</em>。</p>
                <h5>读取属性的特性</h5>
<pre>
console.log(Object.getOwnPropertyDescriptor(obj,'name'))
//Object {value: "l", writable: false, enumerable: false, configurable: false}
</pre>
            </section>
        </div>
    </div>
</article>
<!--
</body>
</html>-->
