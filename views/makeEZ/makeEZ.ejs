<!doctype html>
<html lang="zh">
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="/bower_components/bootstrap/dist/css/bootstrap.min.css"/>
    <link rel="stylesheet" href="/bower_components/font-awesome-4.3.0/css/font-awesome.css"/>
    <script src="/bower_components/jquery/dist/jquery.min.js"></script>
    <script src="/bower_components/bootstrap/dist/js/bootstrap.min.js"></script>
    <script src="/bower_components/less/dist/less.min.js"></script>
    <script>
        (function () {
            function _mz() {
                this.models = {};
                this.mzWatchers = [];
                this.registerModel = function (name, func) {
                    this.models[name] = new func();
                    this.models[name].cst = func;
                    return this;
                };
            }

            var mz = new _mz();
            /*model处理*/
            function initialModels(modelElement, resolved) {
                var subModel = modelElement.attr('model').split('-')[0],
                        superModel = modelElement.attr('model').split('-').length > 1 ? modelElement.attr('model').split('-')[1] : undefined;
                if (superModel) {
                    if (resolved) return mz.models[subModel];
                    var cst = mz.models[subModel].cst;
                    mz.models[subModel].cst.prototype = mz.models[superModel];
                    mz.models[subModel] = new mz.models[subModel].cst();
                    mz.models[subModel].cst = cst;
//                    console.log(mz.models[subModel]);
                }
                return mz.models[subModel]
            }

            /*启动应用*/
            _mz.prototype.bootstrap = function () {
                $(function () {
                    mz.modelCheck();
                    mz.initialMZWatchers();
//                    var dirtyCheckInterval=setInterval(mz.dirtyCheck,500);
                    /**/

                })
            };
            /*数据初始化绑定*/
            _mz.prototype.modelCheck = function (resolved) {
                $('[model]').each(function () {
                    var model = initialModels($(this), resolved);
                    $(this).find('[data-mz]').each(function () {
                        var dataName = $(this).data('mz');
                        if (model[dataName]) {
                            $(this).prop('nodeName') == 'INPUT' || $(this).prop('nodeName') == 'TEXTAREA' ? $(this).val(model[dataName]) : $(this).html(model[dataName]);
                            $(this).data('mzWatched', {
                                model: model, watchName: dataName, watchElem: $(this), oldValue: model[dataName]
                            });
                        }
                    })
                });
            };
            /*绑定队列*/
            _mz.prototype.initialMZWatchers = function () {
                mz.mzWatchers = [];
                $('[data-mz]').each(function () {
                    mz.mzWatchers.push($(this).data('mzWatched'))
                });
//                console.log(mz)
            };

            /*脏值检查*/
            _mz.prototype.dirtyCheck = function () {
                var existDirtyData = false;
                for (var i = 0; i < mz.mzWatchers.length; i++) {
                    var mzWatcher = mz.mzWatchers[i];
                    if (mzWatcher.watchElem.prop('nodeName') == 'INPUT' ||
                            mzWatcher.watchElem.prop('nodeName') == 'TEXTAREA') {
                        if (mzWatcher.model[mzWatcher.watchName] != mzWatcher.watchElem.val()) {
                            existDirtyData = true;
                            if (mzWatcher.model[mzWatcher.watchName] == mzWatcher.oldValue) {
                                mzWatcher.model[mzWatcher.watchName] = mzWatcher.watchElem.val();
                                mzWatcher.oldValue = mzWatcher.watchElem.val();
                            } else {
                                mzWatcher.watchElem.val(mzWatcher.model[mzWatcher.watchName]);
                                mzWatcher.oldValue = mzWatcher.model[mzWatcher.watchName]
                            }
                        }
                    }
                    else if (mzWatcher.model[mzWatcher.watchName] != mzWatcher.watchElem.html()) {
                        existDirtyData = true;
                        if (mzWatcher.model[mzWatcher.watchName] == mzWatcher.oldValue) {
                            mzWatcher.model[mzWatcher.watchName] = mzWatcher.watchElem.html();
                            mzWatcher.oldValue = mzWatcher.watchElem.html()
                        } else {
                            mzWatcher.watchElem.html(mzWatcher.model[mzWatcher.watchName]);
                            mzWatcher.oldValue = mzWatcher.model[mzWatcher.watchName]
                        }
                    }
                }
                existDirtyData && arguments.callee();
            };
            _mz.prototype.safeChage = function (func) {

            };
            /*前端路由的实现*/

            window.mz = mz;
        })()
    </script>
    <script>
        (function () {
            mz.registerView = function (name, path, parentView) {
                mz.views = mz.views == undefined ? {} : mz.views
                mz.views[name] = {};
                mz.views[name].path = path;
                parentView && (mz.views[name].parentView = parentView)
                return this;
            }
            /*视图的跳转，支持二级视图，但是有异步操作也许有bug*/
            mz.go = function (viewName, parentBeResolved) {
                var parentView = mz.views[viewName].parentView;
                if (parentView) {
                    $.get(mz.views[parentView].path).success(function (data) {
                        $('[mz-view]').empty().append(data);
                        $.get(mz.views[viewName].path, function (data) {
                            $('[mz-view]').find('[mz-view]').empty().append(data);
                            mz.bootstrap();
                        })
                    })
                } else {
                    $.get(mz.views[viewName].path, function (data) {
                        $('[mz-view]').empty().append(data);
                        mz.bootstrap();
                    })
                }
            }
        })()
    </script>
    <script>
        /*demo*/
        mz.registerModel('A', function () {
            this.name = 'A';
            this.age = 24;
            this.input = 'lll'
        }).registerModel('a', function () {
            this.name = 'a';
            this.addr = 'suzhou';
            this.age = 12;
        }).registerModel('aa', function () {
            this.name = 'aa';
            this.addr = 'nantong'
        }).registerView('home', '/makeEZ/test.html').registerView('inner', '/makeEZ/inner.html', 'home')
        console.log(mz);
        mz.bootstrap();
        //        mz.go('home');
    </script>
</head>
<body>
<div model="A">
    <span data-mz="name"></span>

    <div model="a-A">
        <div model="aa-a">
            <span data-mz="age"></span>
        </div>
        <span data-mz="addr"></span><br/>
    </div>

    <span data-mz="age"></span>
    <span data-mz="input"></span>
    <input data-mz="input" type="text"/>
    <br/>
    <textarea data-mz="input" name="" id="" cols="30" rows="10">
    </textarea>

    <div mz-view="main">
        <div mz-view="inner"></div>
    </div>
</div>
<button>dirtyCheck</button>
<button id="test">go to test.html</button>
<script>
    $('button').click(function () {
        mz.dirtyCheck();
    });
    $('input').change(function () {
        mz.dirtyCheck();
    });
    $('textarea').change(function () {
        mz.dirtyCheck();
    })
    $('#test').click(function () {
        mz.go('inner')
    });
</script>
</body>
</html>